import 'package:flutter/material.dart';
import '../../../app/theme/colors.dart';
import '../../../app/theme/text_styles.dart';
import '../../../modules/quiz/models/quiz.dart';
import '../../../modules/content/models/content.dart';
import 'content_report_page.dart';

class QuizResultPage extends StatelessWidget {
  final List<Quiz> quizzes;
  final Map<int, String> userAnswers;
  final Map<String, dynamic> results;
  final Content content;

  const QuizResultPage({
    super.key,
    required this.quizzes,
    required this.userAnswers,
    required this.results,
    required this.content,
  });

  @override
  Widget build(BuildContext context) {
    final totalScore = results['totalScore'] ?? 0;
    final maxScore = results['maxPossibleScore'] ?? 0;
    final accuracy = results['accuracyRate'] ?? 0.0;
    final correctAnswers = results['correctAnswers'] ?? 0;

    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.close, color: Colors.black),
          onPressed: () => Navigator.of(context).pop(),
        ),
        title: Text(
          'Quiz Results',
          style: AppTextStyles.h3.copyWith(
            color: AppColors.textPrimary,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            // Ï†ÑÏ≤¥ Í≤∞Í≥º Ïπ¥Îìú
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: AppColors.YBMPurple,
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: AppColors.YBMPurple.withOpacity(0.3),
                    blurRadius: 15,
                    offset: const Offset(0, 8),
                  ),
                ],
              ),
              child: Column(
                children: [
                  Text(
                    'üéâ ÌÄ¥Ï¶à ÏôÑÎ£å!',
                    style: AppTextStyles.h2.copyWith(
                      color: Colors.black,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildScoreItem('Ï†êÏàò', '$totalScore/$maxScore'),
                      _buildScoreItem('Ï†ïÎãµÎ•†', '${accuracy.toStringAsFixed(1)}%'),
                      _buildScoreItem(
                        'ÎßûÌûå Î¨∏Ï†ú',
                        '$correctAnswers/${quizzes.length}',
                      ),
                    ],
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Í∞Å Î¨∏Ï†úÎ≥Ñ Í≤∞Í≥º
            Text(
              'Î¨∏Ï†úÎ≥Ñ Í≤∞Í≥º',
              style: AppTextStyles.h3.copyWith(
                fontWeight: FontWeight.bold,
                color: AppColors.textPrimary,
              ),
            ),
            const SizedBox(height: 16),

            ...List.generate(quizzes.length, (index) {
              final quiz = quizzes[index];
              final userAnswer = userAnswers[index] ?? '';
              return _buildQuizResultCard(quiz, userAnswer, index + 1);
            }),

            const SizedBox(height: 32),

            // Generate Report Î≤ÑÌäº
            SizedBox(
              width: double.infinity,
              height: 56,
              child: ElevatedButton(
                onPressed: () => _generateReport(context),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(28),
                  ),
                  elevation: 2,
                ),
                child: Text(
                  'Generate Report',
                  style: AppTextStyles.bodyLarge.copyWith(
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _generateReport(BuildContext context) async {
    // Ïã§Ï†ú ÌÄ¥Ï¶à Ï†êÏàò Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
    final calculatedResults = <String, dynamic>{};
    int totalScore = 0;
    int correctAnswers = 0;

    for (int i = 0; i < quizzes.length; i++) {
      final quiz = quizzes[i];
      final userAnswer = userAnswers[i] ?? '';
      final isCorrect = _evaluateAnswer(quiz, userAnswer);
      final score = isCorrect ? quiz.points : 0;

      if (isCorrect) {
        totalScore += score;
        correctAnswers++;
      }

      calculatedResults['quiz_$i'] = {
        'isCorrect': isCorrect,
        'score': score,
        'maxScore': quiz.points,
        'userAnswer': userAnswer,
        'correctAnswer': quiz.correctAnswer,
      };
    }

    calculatedResults['totalScore'] = totalScore;
    calculatedResults['correctAnswers'] = correctAnswers;
    calculatedResults['totalQuizzes'] = quizzes.length;

    // Content Report ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    Navigator.push(
      context,
      MaterialPageRoute(
        builder:
            (context) => ContentReportPage(
              content: content,
              quizzes: quizzes,
              userAnswers: userAnswers,
              results: calculatedResults, // Ïã§Ï†ú Í≥ÑÏÇ∞Îêú Í≤∞Í≥º Ï†ÑÎã¨
            ),
      ),
    );
  }

  Widget _buildScoreItem(String label, String value) {
    return Column(
      children: [
        Text(
          value,
          style: AppTextStyles.h2.copyWith(
            color: Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: AppTextStyles.bodyMedium.copyWith(
            color: Colors.black.withOpacity(0.8),
          ),
        ),
      ],
    );
  }

  Widget _buildQuizResultCard(
    Quiz quiz,
    String userAnswer,
    int questionNumber,
  ) {
    // ÏûÑÏãúÎ°ú Í∞ÑÎã®Ìïú Ï±ÑÏ†ê (Ïã§Ï†úÎ°úÎäî AI Ï±ÑÏ†ê Í≤∞Í≥º ÏÇ¨Ïö©)
    final isCorrect = _evaluateAnswer(quiz, userAnswer);
    final score = isCorrect ? quiz.points : 0;

    String quizTypeName = '';
    Color cardColor = AppColors.YBMlightPurple;

    switch (quiz.quizType) {
      case QuizType.vocabulary:
        quizTypeName = 'Word Quiz';
        cardColor = AppColors.YBMlightPurple;
        break;
      case QuizType.translation:
        quizTypeName = 'Translation';
        cardColor = AppColors.YBMlightPurple;
        break;
      case QuizType.summary:
        quizTypeName = 'Summary';
        cardColor = AppColors.YBMlightPurple;
        break;
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: cardColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: isCorrect ? Colors.green : Colors.red.shade300,
          width: 2,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Ìó§Îçî
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  'Q$questionNumber: $quizTypeName',
                  style: AppTextStyles.h4.copyWith(
                    fontWeight: FontWeight.bold,
                    color: AppColors.textPrimary,
                  ),
                ),
              ),
              Row(
                children: [
                  Icon(
                    isCorrect ? Icons.check_circle : Icons.cancel,
                    color: isCorrect ? Colors.green : Colors.red,
                    size: 20,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    '$score/${quiz.points}Ï†ê',
                    style: AppTextStyles.bodyLarge.copyWith(
                      fontWeight: FontWeight.bold,
                      color: isCorrect ? Colors.green : Colors.red,
                    ),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 12),

          // Î¨∏Ï†ú
          if (quiz.excerpt != null) ...[
            Text(
              'ÏõêÎ¨∏:',
              style: AppTextStyles.bodySmall.copyWith(
                fontWeight: FontWeight.bold,
                color: AppColors.textSecondary,
              ),
            ),
            const SizedBox(height: 4),
            Text(
              quiz.excerpt!,
              style: AppTextStyles.bodyMedium.copyWith(
                color: AppColors.textPrimary,
                fontStyle: FontStyle.italic,
              ),
            ),
            const SizedBox(height: 8),
          ],

          Text(
            'Î¨∏Ï†ú: ${quiz.question}',
            style: AppTextStyles.bodyMedium.copyWith(
              color: AppColors.textPrimary,
            ),
          ),
          const SizedBox(height: 12),

          // ÎãµÏïà ÎπÑÍµê (ÏúÑÏïÑÎûò Î∞∞Ïπò)
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // ÎÇ¥ ÎãµÏïà
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'ÎÇ¥ ÎãµÏïà:',
                    style: AppTextStyles.bodySmall.copyWith(
                      fontWeight: FontWeight.bold,
                      color: AppColors.textSecondary,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade50,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.grey.shade300),
                    ),
                    child: Text(
                      userAnswer.isEmpty ? '(ÎãµÏïà ÏóÜÏùå)' : userAnswer,
                      style: AppTextStyles.bodyMedium.copyWith(
                        color:
                            userAnswer.isEmpty
                                ? Colors.grey
                                : AppColors.textPrimary,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              // Ï†ïÎãµ
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Ï†ïÎãµ:',
                    style: AppTextStyles.bodySmall.copyWith(
                      fontWeight: FontWeight.bold,
                      color: AppColors.textSecondary,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.green.shade50,
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.green.shade300),
                    ),
                    child: Text(
                      quiz.correctAnswer,
                      style: AppTextStyles.bodyMedium.copyWith(
                        color: Colors.green.shade700,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),

          // AI ÌîºÎìúÎ∞± (Ï∂îÌõÑ Íµ¨ÌòÑ)
          if (!isCorrect && quiz.quizType != QuizType.vocabulary) ...[
            const SizedBox(height: 12),
            Container(
              width: double.infinity,
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue.shade300),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.psychology,
                        color: Colors.blue.shade600,
                        size: 16,
                      ),
                      const SizedBox(width: 4),
                      Text(
                        'AI ÌîºÎìúÎ∞±',
                        style: AppTextStyles.bodySmall.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.blue.shade600,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Îçî ÏûêÏó∞Ïä§Îü¨Ïö¥ ÌëúÌòÑÏùÑ ÏÇ¨Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî. Î¨∏Îß•ÏùÑ Í≥†Î†§Ìïú Î≤àÏó≠Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.',
                    style: AppTextStyles.bodySmall.copyWith(
                      color: Colors.blue.shade700,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  bool _evaluateAnswer(Quiz quiz, String userAnswer) {
    if (userAnswer.trim().isEmpty) return false;

    print('üîç Ï±ÑÏ†ê ÏãúÏûë - ÌÄ¥Ï¶à ÌÉÄÏûÖ: ${quiz.quizType}');
    print('üìù ÏÇ¨Ïö©Ïûê ÎãµÏïà: "$userAnswer"');
    print('‚úÖ Ï†ïÎãµ: "${quiz.correctAnswer}"');

    switch (quiz.quizType) {
      case QuizType.vocabulary:
        // Îã®Ïñ¥ ÌÄ¥Ï¶à: Ï†ïÌôïÌïú Îã®Ïñ¥ Îß§Ïπ≠
        final userWord = userAnswer.trim().toLowerCase();
        final correctWord = quiz.correctAnswer.trim().toLowerCase();
        final isCorrect = userWord == correctWord;
        print(
          'üìö Îã®Ïñ¥ ÌÄ¥Ï¶à - ÏÇ¨Ïö©Ïûê: "$userWord", Ï†ïÎãµ: "$correctWord", Í≤∞Í≥º: $isCorrect',
        );
        return isCorrect;

      case QuizType.translation:
        // Î≤àÏó≠ ÌÄ¥Ï¶à: ÌÇ§ÏõåÎìú Í∏∞Î∞ò ÌèâÍ∞Ä
        final userText = userAnswer.trim().toLowerCase();
        final correctText = quiz.correctAnswer.trim().toLowerCase();

        // ÌÇ§ÏõåÎìú Ï∂îÏ∂ú (Í∞ÑÎã®Ìïú Î∞©Î≤ï)
        final userKeywords = _extractKeywords(userText);
        final correctKeywords = _extractKeywords(correctText);

        // ÌÇ§ÏõåÎìú Îß§Ïπ≠ ÎπÑÏú® Í≥ÑÏÇ∞
        final matchCount =
            userKeywords
                .where((keyword) => correctKeywords.contains(keyword))
                .length;
        final matchRatio =
            correctKeywords.isNotEmpty
                ? matchCount / correctKeywords.length
                : 0.0;

        final isCorrect =
            matchRatio >= 0.6 && userText.length >= 5; // 60% Ïù¥ÏÉÅ Îß§Ïπ≠ + ÏµúÏÜå Í∏∏Ïù¥
        print(
          'üåê Î≤àÏó≠ ÌÄ¥Ï¶à - Îß§Ïπ≠ ÎπÑÏú®: ${(matchRatio * 100).toStringAsFixed(1)}%, Í≤∞Í≥º: $isCorrect',
        );
        return isCorrect;

      case QuizType.summary:
        // ÏöîÏïΩ ÌÄ¥Ï¶à: ÎÇ¥Ïö© Í∏∞Î∞ò ÌèâÍ∞Ä
        final userText = userAnswer.trim();
        final correctText = quiz.correctAnswer.trim();

        // ÌÇ§ÏõåÎìú Í∏∞Î∞ò ÌèâÍ∞Ä
        final userKeywords = _extractKeywords(userText.toLowerCase());
        final correctKeywords = _extractKeywords(correctText.toLowerCase());

        final matchCount =
            userKeywords
                .where((keyword) => correctKeywords.contains(keyword))
                .length;
        final matchRatio =
            correctKeywords.isNotEmpty
                ? matchCount / correctKeywords.length
                : 0.0;

        final isCorrect =
            matchRatio >= 0.5 && userText.length >= 20; // 50% Ïù¥ÏÉÅ Îß§Ïπ≠ + ÏµúÏÜå Í∏∏Ïù¥
        print(
          'üìñ ÏöîÏïΩ ÌÄ¥Ï¶à - Îß§Ïπ≠ ÎπÑÏú®: ${(matchRatio * 100).toStringAsFixed(1)}%, Í≤∞Í≥º: $isCorrect',
        );
        return isCorrect;
    }
  }

  List<String> _extractKeywords(String text) {
    // Í∞ÑÎã®Ìïú ÌÇ§ÏõåÎìú Ï∂îÏ∂ú (ÌïúÍ∏Ä, ÏòÅÏñ¥ Îã®Ïñ¥)
    final words =
        text
            .split(RegExp(r'[^\wÍ∞Ä-Ìû£]'))
            .where((word) => word.length > 1)
            .toList();
    return words.take(10).toList(); // ÏÉÅÏúÑ 10Í∞ú Îã®Ïñ¥Îßå ÏÇ¨Ïö©
  }
}
